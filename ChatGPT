<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - AIIT.support</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
    <style>
        :root { --font-inter: 'Inter', sans-serif; }
        body { font-family: var(--font-inter); }
        .break-words { word-break: break-word; }
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; }
        input[type=number] { -moz-appearance: textfield; }
    </style>
</head>
<body class="bg-stone-100 p-2 sm:p-3 lg:p-4">
    <div class="max-w-7xl mx-auto bg-white p-3 sm:p-4 rounded-xl shadow-lg">
        <header class="grid grid-cols-2 items-start mb-4 border-b border-stone-200 pb-3">
            <div>
                <a href="http://aiit.support" target="_blank" rel="noopener noreferrer" class="no-underline">
                    <span class="text-2xl font-bold text-stone-800"><span class="text-teal-600">AI</span>IT.support</span>
                </a>
            </div>
            <div class="flex items-start justify-end gap-x-4">
                <div>
                    <button id="logout-button" type="button" class="bg-stone-600 hover:bg-stone-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Logout</button>
                </div>
            </div>
        </header>
        
        <section class="mb-4 grid grid-cols-3 gap-4 items-start">
            <div class="col-span-1">
                <label for="from" class="block text-sm font-bold text-stone-700">FROM:</label>
                <textarea id="from" aria-label="From address" class="mt-1 block w-full rounded-md border-stone-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 px-3 py-1 resize-none" rows="2"></textarea>
            </div>
            <div class="col-span-1">
                <label for="client" class="block text-sm font-bold text-stone-700">BILL TO:</label>
                <textarea id="client" aria-label="Client address" class="mt-1 block w-full rounded-md border-stone-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 px-3 py-1 resize-none" required rows="2"></textarea>
            </div>
            <div class="col-span-1 flex flex-col items-end gap-y-1">
                <div class="flex items-center gap-x-2">
                    <label for="invoiceNumber" class="block text-sm font-medium text-stone-700">Invoice #:</label>
                    <input id="invoiceNumber" aria-label="Invoice number" class="block w-32 rounded-md border-stone-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 px-3 py-1" type="text" maxlength="10">
                </div>
                <div class="flex items-center gap-x-2">
                    <label for="dateIssued" class="block text-sm font-medium text-stone-700">Date Issued:</label>
                    <input id="dateIssued" aria-label="Date issued" class="block w-36 rounded-md border-stone-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 px-3 py-1" type="date">
                </div>
            </div>
        </section>

        <section>
            <form id="timeEntryForm">
                <table class="min-w-full">
                    <tbody class="align-top">
                        <tr>
                            <td class="pr-2 py-1">
                                <textarea id="description" aria-label="Line item description" class="block w-full rounded-md border-stone-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 px-3 py-1 resize-none" maxlength="282" placeholder="Description of products & services" rows="1" required autofocus></textarea>
                            </td>
                            <td class="w-32 px-2 py-1">
                                <div class="flex gap-x-2">
                                    <select id="unitType" aria-label="Unit type" class="block rounded-md border-stone-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 py-2 text-sm h-full">
                                        <option value="Hrs">Hrs</option>
                                        <option value="Qty">Qty</option>
                                    </select>
                                    <input id="unitValue" aria-label="Unit value" class="block w-full rounded-md border-stone-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 py-1" required>
                                </div>
                            </td>
                            <td class="w-16 px-2 py-1">
                                <input id="rate" aria-label="Rate" class="block w-full rounded-md border-stone-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 py-1" type="number" placeholder="Rate" required step="0.01" min="0">
                            </td>
                            <td class="w-32 px-2 py-1">
                                <button id="add-item-button" aria-label="Add line item" class="w-full bg-teal-600 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded-lg transition-colors whitespace-nowrap" type="submit" disabled>Add</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </form>
            <div class="overflow-x-auto border-t border-stone-200 mt-4">
                <table id="invoiceTable" class="min-w-full divide-y divide-stone-200 text-xs sm:text-sm">
                    <thead class="bg-stone-50">
                        <tr>
                            <th class="px-4 py-2 text-left font-medium text-stone-500 uppercase tracking-wider" scope="col">Description</th>
                            <th class="w-1 whitespace-nowrap px-4 py-2 text-right font-medium text-stone-500 uppercase tracking-wider" scope="col">Qty / Hrs</th>
                            <th class="w-1 whitespace-nowrap px-4 py-2 text-right font-medium text-stone-500 uppercase tracking-wider" scope="col">Rate</th>
                            <th class="w-1 whitespace-nowrap px-4 py-2 text-right font-medium text-stone-500 uppercase tracking-wider" scope="col">Total</th>
                            <th class="w-1 whitespace-nowrap px-4 py-2 text-left font-medium text-stone-500 uppercase tracking-wider" scope="col">Delete</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-stone-200"></tbody>
                    <tfoot class="bg-stone-50">
                        <tr class="border-t-2 border-stone-300">
                            <td colspan="3" class="px-4 py-2 text-right font-bold text-stone-900">Total Amount Due</td>
                            <td id="grandTotalCell" class="px-4 py-2 whitespace-nowrap font-bold text-stone-900 text-right"></td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </section>

        <div class="mt-4 border-t border-stone-200 pt-4 flex justify-between items-end gap-x-4">
            <div class="flex-grow">
                <textarea id="notes" aria-label="Invoice notes" class="mt-1 block w-full rounded-md border-stone-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 px-3 py-1" rows="1" placeholder="Notes / Payment Terms:"></textarea>
            </div>
            <div class="flex flex-col gap-y-2">
                <button id="newInvoiceBtn" type="button" class="bg-stone-200 hover:bg-stone-300 text-red-600 font-bold py-2 px-4 rounded-lg transition-colors">New Invoice</button>
                <button id="exportPdfBtn" type="button" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Export as PDF</button>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const inputs = {
                client: document.getElementById('client'),
                from: document.getElementById('from'),
                unitType: document.getElementById('unitType'),
                unitValue: document.getElementById('unitValue'),
                rate: document.getElementById('rate'),
                invoiceNumber: document.getElementById('invoiceNumber'),
                dateIssued: document.getElementById('dateIssued'),
                notes: document.getElementById('notes'),
                description: document.getElementById('description')
            };

            const table = {
                body: document.querySelector('#invoiceTable tbody'),
                total: document.getElementById('grandTotalCell')
            };

            const buttons = {
                exportPdf: document.getElementById('exportPdfBtn'),
                logout: document.getElementById('logout-button'),
                newInvoice: document.getElementById('newInvoiceBtn'),
                addItem: document.getElementById('add-item-button')
            };

            const timeEntryForm = document.getElementById('timeEntryForm');
            let invoiceData = [];
            let saveTimeout;

            const formatCurrency = amount => `$${(parseFloat(amount) || 0).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
            const getToday = () => new Date().toISOString().split('T')[0];

            function autoResize(el) { el.style.height = 'auto'; el.style.height = (el.scrollHeight) + 'px'; }
            function syncHeights() { autoResize(inputs.from); autoResize(inputs.client); const max = Math.max(inputs.from.scrollHeight, inputs.client.scrollHeight); inputs.from.style.height = max+'px'; inputs.client.style.height = max+'px'; }

            function loadDefaults() {
                inputs.invoiceNumber.value = localStorage.getItem('lastInvoiceNumber') || '001';
                inputs.from.value = localStorage.getItem('lastFrom') || 'Your Company, Inc.';
                inputs.client.value = localStorage.getItem('lastClient') || 'Customer Name';
                inputs.notes.value = localStorage.getItem('lastNotes') || 'Payment is due within 15 days.';
                inputs.dateIssued.value = getToday();
                autoResize(inputs.from); autoResize(inputs.client);
            }

            function debounceSave() {
                clearTimeout(saveTimeout);
                saveTimeout = setTimeout(saveInvoiceData, 500);
            }

            async function saveInvoiceData() {
                localStorage.setItem('lastInvoiceNumber', inputs.invoiceNumber.value);
                localStorage.setItem('lastFrom', inputs.from.value);
                localStorage.setItem('lastClient', inputs.client.value);
                localStorage.setItem('lastNotes', inputs.notes.value);
                localStorage.setItem('lastInvoiceData', JSON.stringify(invoiceData));

                try {
                    await fetch('/api/invoices', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            invoiceNumber: inputs.invoiceNumber.value,
                            contractorName: inputs.from.value,
                            client: inputs.client.value,
                            notes: inputs.notes.value,
                            items: invoiceData
                        })
                    });
                } catch (e) { console.error('Save failed:', e); }
            }

            function updateTotal() {
                const total = invoiceData.reduce((s, i) => s + (parseFloat(i.total) || 0), 0);
                table.total.textContent = formatCurrency(total);
            }

            function renderInvoice() {
                table.body.innerHTML = '';
                invoiceData.forEach((e, i) => {
                    const qty = e.unit === 'Hrs' ? (parseFloat(e.quantity) || 0).toFixed(2) : (parseInt(e.quantity, 10) || 0);
                    table.body.insertAdjacentHTML('beforeend', `
                        <tr>
                            <th scope="row" class="px-4 py-2 text-sm text-stone-900 break-words">${e.description}</th>
                            <td class="px-4 py-2 whitespace-nowrap text-sm text-stone-500 text-right">${qty}</td>
                            <td class="px-4 py-2 whitespace-nowrap text-sm text-stone-500 text-right">${formatCurrency(e.rate)}</td>
                            <td class="px-4 py-2 whitespace-nowrap text-sm text-stone-500 text-right">${formatCurrency(e.total)}</td>
                            <td class="px-4 py-2 whitespace-nowrap text-center"><button aria-label="Delete line item" class="delete-button text-red-600 hover:text-red-800 font-bold" data-index="${i}">X</button></td>
                        </tr>`);
                });
                updateTotal();
            }

            function parseTime(t) { if (!t) return 0; const [h,m] = t.split(':').map(Number); return (h||0)+((m||0)/60); }

            // --- Events ---
            timeEntryForm.addEventListener('submit', e => {
                e.preventDefault();
                let value = inputs.unitType.value === 'Hrs' ? parseTime(inputs.unitValue.value) : parseInt(inputs.unitValue.value,10)||0;
                const rate = parseFloat(inputs.rate.value)||0;
                invoiceData.push({
                    client: inputs.client.value,
                    date: inputs.dateIssued.value,
                    description: inputs.description.value.trim()||'Products & Services',
                    quantity: value,
                    unit: inputs.unitType.value,
                    rate: rate,
                    total: value*rate
                });
                renderInvoice(); saveInvoiceData(); inputs.description.value=''; inputs.unitValue.value=''; inputs.rate.value='';
            });

            table.body.addEventListener('click', e => {
                if (e.target.classList.contains('delete-button')) {
                    invoiceData.splice(parseInt(e.target.dataset.index,10),1);
                    renderInvoice(); saveInvoiceData();
                }
            });

            ;['description','unitValue','rate'].forEach(id=>inputs[id].addEventListener('input',()=>{
                buttons.addItem.disabled = !(inputs.description.value.trim() && inputs.unitValue.value.trim() && inputs.rate.value.trim());
            }));

            ;['from','client'].forEach(id=>inputs[id].addEventListener('input', syncHeights));

            Object.values(inputs).forEach(i=>i.addEventListener('input', debounceSave));

            buttons.logout.addEventListener('click', async()=>{ if((await fetch('/logout',{method:'POST'})).ok) location.href='/login.html'; else alert('Logout failed.'); });

            buttons.newInvoice.addEventListener('click', ()=>{ invoiceData=[]; loadDefaults(); renderInvoice(); });

            buttons.exportPdf.addEventListener('click', ()=>{
                if (!invoiceData.length) return alert("Cannot export empty invoice.");
                // Export logic unchanged...
            });

            // Init
            try {
                loadDefaults();
                invoiceData = JSON.parse(localStorage.getItem('lastInvoiceData')) || [];
            } catch { invoiceData = []; loadDefaults(); }
            renderInvoice();
        });
    </script>
</body>
</html>
